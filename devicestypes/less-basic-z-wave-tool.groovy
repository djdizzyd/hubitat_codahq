/*
	Less Basic Z-Wave Tool

	Copyright 2016, 2017, 2018 Hubitat Inc.  All Rights Reserved
	
	Based mostly on Mike Maxwell's Basic Z-Wave Tool

	usage:
		-replace existing driver with this driver
		-set your paremeters
		-replace this driver with previous driver
	
	WARNING!
		--Setting device parameters is an advanced feature, randomly poking values to a device
		can lead to unexpected results which may result in needing to perform a factory reset 
		or possibly bricking the device
		--Refer to the device documentation for the correct parameters and values for your specific device
		--Hubitat cannot be held responsible for misuse of this tool or any unexpected results generated by its use
*/

import groovy.transform.Field

metadata {
  definition (name: "Less Basic Z-Wave tool",namespace: "codahq-hubitat", author: "Ben Rimmasch") {

    command "getAssociationReport", [[name:"Max Group ID",type:"NUMBER", description:"Query every association group up to this number (default: 5)", constraints:["NUMBER"]]]
    command "setGroupAssociation",[
      [name:"Association Group ID", type: "NUMBER", description:"Association Group to be associated", constraints:["NUMBER"]],
      [name:"Nodes To Associate", type: "STRING", description:"Comma separated list of nodes to associate to Assocation Group.  Enter 0 to remove associations.", constraints:["STRING"]],
      [name:"Max Supported Nodes", type: "NUMBER", description:"Max number of nodes allowed in the Association Group", constraints:["NUMBER"]]
    ]
    command "getVersionReport"
    command "getCommandClassReport"
    command "getManufacturerReport"
    command "getParameterReport", [[name:"parameterNumber",type:"NUMBER", description:"Parameter Number (omit for a complete listing of parameters that have been set)", constraints:["NUMBER"]]]
    command "setParameter",[[name:"parameterNumber",type:"NUMBER", description:"Parameter Number", constraints:["NUMBER"]],[name:"size",type:"NUMBER", description:"Parameter Size", constraints:["NUMBER"]],[name:"value",type:"NUMBER", description:"Parameter Value", constraints:["NUMBER"]]]

  }
}

@Field Map zwLibType = [
  0:"N/A",1:"Static Controller",2:"Controller",3:"Enhanced Slave",4:"Slave",5:"Installer",
  6:"Routing Slave",7:"Bridge Controller",8:"Device Under Test (DUT)",9:"N/A",10:"AV Remote",11:"AV Device"
]

def parse(String description) {
  //log.debug description
  def cmd = zwave.parse(description, [0x85:1,0x86:1])
  if (cmd) {
    zwaveEvent(cmd)
  }
}

//Z-Wave responses
def zwaveEvent(hubitat.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
  log.info("received Manufacturer Specific Report")
  log.info "manufacturerId:   ${cmd.manufacturerId}"
  log.info "manufacturerName: ${cmd.manufacturerName}"
  log.info "productId:        ${cmd.productId}"
  log.info "productTypeId:    ${cmd.productTypeId}"
  def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
  def cmds = []
  if (!(msr.equals(getDataValue("MSR")))) {
    updateDataValue("MSR", msr)
    cmds << createEvent([descriptionText: "$device.displayName MSR: $msr", isStateChange: true, displayed: false])
  }
  if (!(cmd.manufacturerId.toString().equals(getDataValue("manufacturer")))) {
    updateDataValue("manufacturer", cmd.manufacturerId.toString())
    cmds << createEvent([descriptionText: "$device.displayName manufacturer ID: ${cmd.manufacturerId}", isStateChange: true, displayed: false])
  }
  if (!(cmd.manufacturerName.equals(getDataValue("manufacturerName")))) {
    updateDataValue("manufacturerName", cmd.manufacturerName)
    cmds << createEvent([descriptionText: "$device.displayName manufacturer name: ${cmd.manufacturerName}", isStateChange: true, displayed: false])
  }
  cmds
}

def zwaveEvent(hubitat.zwave.commands.versionv1.VersionReport cmd) {
  log.info("received Version Report")
  log.info "applicationVersion:      ${cmd.applicationVersion}"
  log.info "applicationSubVersion:   ${cmd.applicationSubVersion}"
  log.info "zWaveLibraryTypeRaw:     ${cmd.zWaveLibraryType}"
  log.info "zWaveLibraryType:        ${zwLibType.find{ it.key == cmd.zWaveLibraryType }.value}"
  log.info "zWaveProtocolVersion:    ${cmd.zWaveProtocolVersion}"
  log.info "zWaveProtocolSubVersion: ${cmd.zWaveProtocolSubVersion}"
  //logDebug "firmware0Version:        ${cmd.firmware0Version}"
  //logDebug "firmware0SubVersion:     ${cmd.firmware0SubVersion}"
  def ver = cmd.applicationVersion + '.' + cmd.applicationSubVersion
  def cmds = []
  if (!(ver.equals(getDataValue("firmware")))) {
    updateDataValue("firmware", ver)
    cmds << createEvent([descriptionText: "Firmware version " + ver, isStateChange: true, displayed: false])
  }
  cmds
}

def zwaveEvent(hubitat.zwave.commands.associationv1.AssociationReport cmd) {
  log.info "AssociationReport- groupingIdentifier:${cmd.groupingIdentifier}, maxNodesSupported:${cmd.maxNodesSupported}, nodes:${cmd.nodeId}"
}

def zwaveEvent(hubitat.zwave.commands.configurationv1.ConfigurationReport cmd) {
  log.info "ConfigurationReport- parameterNumber:${cmd.parameterNumber}, size:${cmd.size}, value:${cmd.scaledConfigurationValue}"
}

def zwaveEvent(hubitat.zwave.commands.versionv1.VersionCommandClassReport cmd) {
  log.info "CommandClassReport- class:${ "0x${intToHexStr(cmd.requestedCommandClass)}" }, version:${cmd.commandClassVersion}"		
}	

def zwaveEvent(hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
  def encapCmd = cmd.encapsulatedCommand()
  def result = []
  if (encapCmd) {
    result += zwaveEvent(encapCmd)
  } else {
    log.warn "Unable to extract encapsulated cmd from ${cmd}"
  }
  return result
}

def zwaveEvent(hubitat.zwave.Command cmd) {
  log.debug "skip: ${cmd}"
}

//cmds
def getVersionReport(){
  return secureCmd(zwave.versionV1.versionGet())		
}

def setParameter(parameterNumber = null, size = null, value = null){
  if (parameterNumber == null || size == null || value == null) {
    log.warn "incomplete parameter list supplied..."
    log.info "syntax: setParameter(parameterNumber,size,value)"
  }
  else {
    return delayBetween([
      secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: value, parameterNumber: parameterNumber, size: size)),
      secureCmd(zwave.configurationV1.configurationGet(parameterNumber: parameterNumber))
    ], 500)
  }
}

def getAssociationReport(range = 5){
  def cmds = []
  1.upto(range, {
    log.info "Requesting report for Association Group $it"
    cmds.add(secureCmd(zwave.associationV1.associationGet(groupingIdentifier: it)))
  })
  return delayBetween(cmds, 500)
}

def getParameterReport(param = null) {
  def cmds = []
  if (param) {
    cmds = [secureCmd(zwave.configurationV1.configurationGet(parameterNumber: param))]
  }
  else {
    0.upto(20, {
      cmds.add(secureCmd(zwave.configurationV1.configurationGet(parameterNumber: it)))	
    })
  }
  return delayBetween(cmds, 3000)
}	

def getCommandClassReport(){
  def cmds = []
  def ic = getDataValue("inClusters").split(",").collect{ hexStrToUnsignedInt(it) }
  ic.each {
    if (it) cmds.add(secureCmd(zwave.versionV1.versionCommandClassGet(requestedCommandClass:it)))
  }
  return delayBetween(cmds,500)
}

def getManufacturerReport(){
  return secureCmd(zwave.manufacturerSpecificV1.manufacturerSpecificGet())		
}

def setGroupAssociation(group = 0, nodes = "", max = 4) { 
  nodes = parseAssocGroupList(nodes, group, max)
  
  log.warn "Adding nodes $nodes to group $group"
  cmds = []
  cmds << zwave.associationV2.associationRemove(groupingIdentifier: group, nodeId: []).format()
  if (nodes) {
    cmds << zwave.associationV2.associationSet(groupingIdentifier: group, nodeId: nodes).format()
  }
  cmds << zwave.associationV2.associationGet(groupingIdentifier: group).format()
  return delayBetween(cmds, 500)
}

def installed() {}

def configure() {}

def updated() {}

private secureCmd(cmd) {
  if (getDataValue("zwaveSecurePairingComplete") == "true") {
    return zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
  }
  else {
    return cmd.format()
  }	
}

private parseAssocGroupList(list, group, max) {
  log.warn "HOLY CRAP!!!  I REALLY HOPE YOU KNOW WHAT YOU ARE DOING!!!"
  if (!group) return []
  def nodes = group == 1 ? [zwaveHubNodeId] : []
  if (list) {
    def nodeList = list.split(',')

    def count = 0

    nodeList.each {
      node ->
        node = node.trim()
      if (count >= max) {
        log.warn "Association Group ${group}: Number of members is greater than ${max}! The following member was discarded: ${node}"
      }
      else if (node.matches("\\p{XDigit}+")) {
        def nodeId = Integer.parseInt(node, 16)
        if (nodeId == zwaveHubNodeId && group != 1) {
          log.warn "Caution!!! Adding the hub to an association group can make things go sideways!"
        }
        if (nodeId == 0 && group != 1) {
          log.warn "Removing associations from group $group"
        }
        else if (nodeId == 0 && group == 1) {
          log.error "I don't think you're supposed to remove the hub from the life-line..."
          nodes << 1
        }
        else if ((nodeId > 0) & (nodeId < 256)) {
          nodes << nodeId
          count++
        }
        else {
          log.warn "Association Group ${group}: Out of bounds: ${node}"
        }
      }
      else {
        log.warn "Association Group ${group}: Not a number: ${node}"
      }
    }
  }

  return nodes
}
